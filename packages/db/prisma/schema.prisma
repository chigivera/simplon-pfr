// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    uid                String        @id
    createdAt          DateTime      @default(now())
    updatedAt          DateTime      @updatedAt
    name               String?
    image              String?
    stripe_customer_id String?
    Credentials        Credentials?
    AuthProvider       AuthProvider?
    Admin              Admin?
    Individual         Individual?
    Member             Member?
    Organization       Organization?
    Community          Community[]
    Event              Event[]
    Payment            Payment[]
    Ticket             Ticket[]
    tags               Tag[]         @relation(name: "UserTags")
}

model Admin {
    uid  String @id
    user User   @relation(fields: [uid], references: [uid],onDelete: Cascade)
}

model Member {
    uid         String      @id
    user        User        @relation(fields: [uid], references: [uid],onDelete: Cascade)
    communities Community[]
}

model Individual {
    uid  String @id
    user User   @relation(fields: [uid], references: [uid],onDelete: Cascade)
}

model Organization {
    uid  String @id
    user User   @relation(fields: [uid], references: [uid],onDelete: Cascade)
}

model Credentials {
    uid          String   @id
    email        String   @unique
    user         User     @relation(fields: [uid], references: [uid],onDelete: Cascade)
    passwordHash String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model AuthProvider {
    uid String @id

    type AuthProviderType
    user User             @relation(fields: [uid], references: [uid],onDelete: Cascade)
}

enum AuthProviderType {
    GOOGLE
    CREDENTIALS
}

model Community {
    community_id String   @id @default(uuid())
    name         String   
    description  String?
    created_at   DateTime @default(now())
    uid          String   @unique
    members      Member[]
    owner        User     @relation(fields: [uid], references: [uid],onDelete: Cascade)
    events       Event[]
    tags         Tag[]    @relation(name: "CommunityTags")
    image String?
    @@map("communities") // Rename the table to communities
}

model Event {
    event_id     String     @id @default(uuid())
    title        String
    description  String?
    date         DateTime
    city_id      String // Foreign key referencing Location
    uid          String?
    community_id String?
    tags         Tag[]      @relation(name: "EventTags")
    user         User?      @relation(fields: [uid], references: [uid],onDelete: SetNull)
    community    Community? @relation(fields: [community_id], references: [community_id])
    tickets      Ticket[]
    city         City       @relation(fields: [city_id], references: [id])
    address      String?
    longitude    Float?
    latitude     Float?
    ticketAmount Int
    TicketPrice  Float      @default(0)
    type         EventType
    image        String? // New attribute for image
    ticketSold Int                        
    @@map("events") // Rename the table to events
}

enum EventType {
    FREE
    PAID
}

model Ticket {
    ticket_id     String   @id @default(uuid())
    event_id      String
    uid           String
    purchase_date DateTime @default(now())
    status        String
    event Event @relation(fields: [event_id], references: [event_id])
    user  User  @relation(fields: [uid], references: [uid],onDelete: Cascade)

    @@map("tickets") // Rename the table to tickets
}

model Payment {
    payment_id   String   @id @default(uuid())
    uid          String
    amount       Float
    currency     String
    status       String
    billing_date DateTime

    user User @relation(fields: [uid], references: [uid],onDelete: Cascade)

    @@map("payments") // Rename the table to payments
}

model Tag {
    tag_id String @id @default(uuid())
    name   String @unique

    events      Event[]     @relation(name: "EventTags")
    communities Community[] @relation(name: "CommunityTags")
    users       User[]      @relation(name: "UserTags")
}

model City {
    id        String  @id @default(uuid())
    name      String  @unique
    longitude Float?
    latitude  Float?
    events    Event[] // A location can have many events

    @@map("cities") // Rename the table to locations
}
